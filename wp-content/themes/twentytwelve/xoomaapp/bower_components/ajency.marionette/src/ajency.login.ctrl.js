// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Ajency.LoginView = (function(_super) {
  __extends(LoginView, _super);

  function LoginView() {
    this._fbLoginHandler = __bind(this._fbLoginHandler, this);
    this.loginWithFacebook = __bind(this.loginWithFacebook, this);
    return LoginView.__super__.constructor.apply(this, arguments);
  }

  LoginView.prototype.template = '#login-template';

  LoginView.prototype.ui = {
    'loginBtn': '.aj-login-button',
    'fbLoginButton': '.aj-fb-login-button',
    'userLogin': 'input[name="user_login"]',
    'userPass': 'input[name="user_pass"]'
  };

  LoginView.prototype.events = {
    'click @ui.loginBtn': 'loginDefault',
    'click @ui.fbLoginButton': 'loginWithFacebook'
  };

  LoginView.prototype.initialize = function(options) {
    if (options == null) {
      options = {};
    }
    return this.listenTo(currentUser, 'user:auth:failed', function(response) {
      return this.triggerMethod('user:auth:failed', response);
    });
  };

  LoginView.prototype.loginWithFacebook = function(evt) {
    var _scope;
    if (!_.isFbDefined()) {
      throw new Marionette.Error('Please add facebook SDK');
    }
    _scope = this.ui.fbLoginButton.attr('fb-scope');
    _scope = !_.isString(_scope) ? '' : _scope;
    return FB.login(this._fbLoginHandler, {
      scope: _scope
    });
  };

  LoginView.prototype._fbLoginHandler = function(response) {
    if (response.authResponse) {
      return FB.api('/me', (function(_this) {
        return function(user) {
          return _this.triggerMethod('facebook:login:success', user, response.authResponse.accessToken);
        };
      })(this));
    } else {
      return this.triggerMethod('facebook:login:cancel');
    }
  };

  LoginView.prototype.loginDefault = function() {
    var data;
    data = {
      user_login: this.ui.userLogin.val(),
      user_pass: this.ui.userPass.val()
    };
    return currentUser.authenticate(data);
  };

  return LoginView;

})(Marionette.ItemView);

Ajency.LoginCtrl = (function(_super) {
  __extends(LoginCtrl, _super);

  function LoginCtrl() {
    return LoginCtrl.__super__.constructor.apply(this, arguments);
  }

  LoginCtrl.prototype.initialize = function() {
    var loginView;
    loginView = new Ajency.LoginView;
    this.listenTo(loginView, 'facebook:login:success', this._facebookAuthSuccess);
    this.listenTo(loginView, 'facebook:login:cancel', this._facebookAuthCancel);
    return this.show(loginView);
  };

  LoginCtrl.prototype._facebookAuthSuccess = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return currentUser.authenticate.apply(currentUser, ['facebook'].concat(__slice.call(args)));
  };

  LoginCtrl.prototype._facebookAuthCancel = function() {
    return currentUser.trigger('user:auth:cancel');
  };

  return LoginCtrl;

})(Marionette.RegionController);
