// Generated by CoffeeScript 1.7.1
var ProductHistoryChildView, ViewProductHistoryView, emptyChildView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

App.state('ViewProductHistory', {
  url: '/product/:id/history',
  parent: 'xooma'
});

ProductHistoryChildView = (function(_super) {
  __extends(ProductHistoryChildView, _super);

  function ProductHistoryChildView() {
    return ProductHistoryChildView.__super__.constructor.apply(this, arguments);
  }

  ProductHistoryChildView.prototype.tagName = 'li';

  ProductHistoryChildView.prototype.className = '.work';

  ProductHistoryChildView.prototype.template = '<div class="relative"> <label class="labels" class="m-t-20" for="work{{meta_id}}">{{qty}} CONSUMED</label> <span class="date"><i class="fa fa-clock-o"></i>{{time}}<small class="">( {{fromnow}} ) </small></span> <span class="circle"></span> </div>';

  ProductHistoryChildView.prototype.serializeData = function() {
    var data, meta_value, timezone;
    data = ProductHistoryChildView.__super__.serializeData.call(this);
    console.log(meta_value = this.model.get('meta_value'));
    timezone = App.currentUser.get('timezone');
    data.time = moment(meta_value.date + timezone, "HH:mm Z").format("hA");
    console.log(meta_value.date);
    data.fromnow = moment([meta_value.date]).fromNow();
    data.qty = meta_value.qty;
    return data;
  };

  return ProductHistoryChildView;

})(Marionette.ItemView);

emptyChildView = (function(_super) {
  __extends(emptyChildView, _super);

  function emptyChildView() {
    return emptyChildView.__super__.constructor.apply(this, arguments);
  }

  emptyChildView.prototype.template = 'No Consumption done for current date';

  return emptyChildView;

})(Marionette.ItemView);

ViewProductHistoryView = (function(_super) {
  __extends(ViewProductHistoryView, _super);

  function ViewProductHistoryView() {
    return ViewProductHistoryView.__super__.constructor.apply(this, arguments);
  }

  ViewProductHistoryView.prototype.template = '#view-history-template';

  ViewProductHistoryView.prototype.childView = ProductHistoryChildView;

  ViewProductHistoryView.prototype.childViewContainer = 'ul.viewHistory';

  ViewProductHistoryView.prototype.emptyView = emptyChildView;

  ViewProductHistoryView.prototype.onShow = function() {
    return $('#picker_inline_fixed').pickadate({
      onOpen: function() {
        return scrollPageTo(this.$node);
      },
      onClose: function() {
        return $('body').css('overflow', '');
      }
    });
  };

  ViewProductHistoryView.prototype.serializeData = function() {
    var data, name;
    data = ViewProductHistoryView.__super__.serializeData.apply(this, arguments);
    name = Marionette.getOption(this, 'name');
    data.name = name.toUpperCase();
    return data;
  };

  ViewProductHistoryView.prototype.scrollPageTo = function($node) {
    $('html, body').animate({
      scrollTop: ~~$node.offset().top - 60
    }, 150);
    return $('body').css('overflow', 'auto');
  };

  return ViewProductHistoryView;

})(Marionette.CompositeView);

App.ViewProductHistoryCtrl = (function(_super) {
  __extends(ViewProductHistoryCtrl, _super);

  function ViewProductHistoryCtrl() {
    this.successHandler = __bind(this.successHandler, this);
    return ViewProductHistoryCtrl.__super__.constructor.apply(this, arguments);
  }

  ViewProductHistoryCtrl.prototype.initialize = function(options) {
    var productId, products;
    if (options == null) {
      options = {};
    }
    productId = this.getParams();
    products = [];
    return this._showView(productId[0]);
  };

  ViewProductHistoryCtrl.prototype._showView = function(model) {
    var date, product;
    product = model;
    date = moment().format("YYYY-MM-DD");
    return $.ajax({
      method: 'GET',
      data: 'date=' + date,
      url: "" + _SITEURL + "/wp-json/history/" + (App.currentUser.get('ID')) + "/products/" + product,
      success: this.successHandler,
      error: this.errorHandler
    });
  };

  ViewProductHistoryCtrl.prototype.successHandler = function(response, status, xhr) {
    var arrColl, coll, temp;
    console.log(coll = new Backbone.Collection(response.response));
    console.log(response.name);
    arrColl = [];
    coll.each(function(item) {
      if (item.get('meta_value').length !== 0) {
        return arrColl.push({
          meta_id: item.get('item'),
          meta_value: item.get('meta_value')
        });
      }
    });
    console.log(temp = new Backbone.Collection(arrColl));
    return this.show(new ViewProductHistoryView({
      collection: temp,
      name: response.name
    }));
  };

  return ViewProductHistoryCtrl;

})(Ajency.RegionController);
