// Generated by CoffeeScript 1.7.1
var AsperbmiView, arr,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

App.state('Asperbmi', {
  url: '/products/:id/bmi',
  parent: 'xooma'
});

arr = [];

AsperbmiView = (function(_super) {
  __extends(AsperbmiView, _super);

  function AsperbmiView() {
    this.saveHandler = __bind(this.saveHandler, this);
    return AsperbmiView.__super__.constructor.apply(this, arguments);
  }

  AsperbmiView.prototype.template = '#asperbmi-template';

  AsperbmiView.prototype.ui = {
    responseMessage: '.aj-response-message'
  };

  AsperbmiView.prototype.events = {
    'click #remove': function(e) {
      var count, percentage;
      count = $('#confirm').attr('data-count');
      percentage = parseFloat($('#percentage').val());
      count++;
      console.log(count);
      if (count > 5) {
        return false;
      }
      $('#confirm').attr('data-count', count);
      if (count === 1) {
        percentage += 0.25;
        $('.high').removeClass('level-25');
        arr.push({
          "class": $('.high').attr('data-level'),
          qty: $('.high').attr('data-qty'),
          per: 25
        });
      }
      if (count === 2) {
        percentage += 0.25;
        $('.medium').removeClass('level-25');
        arr.push({
          "class": $('.medium').attr('data-level'),
          qty: $('.medium').attr('data-qty'),
          per: 25
        });
      }
      if (count === 3) {
        percentage += 0.25;
        $('.half').removeClass('level-25');
        arr.push({
          "class": $('.half').attr('data-level'),
          qty: $('.half').attr('data-qty'),
          per: 25
        });
      }
      if (count === 4) {
        percentage += 0.25;
        $('.low').removeClass('level-25');
        arr.push({
          "class": $('.low').attr('data-level'),
          qty: $('.low').attr('data-qty'),
          per: 25
        });
      }
      console.log(percentage);
      return $('#percentage').val(percentage);
    },
    'click #add': function(e) {
      var count, per;
      console.log(arr);
      per = 0;
      count = $('#confirm').attr('data-count');
      $.each(arr, function(ind, val) {
        var classname, qty;
        classname = val["class"];
        qty = val.qty;
        $('.' + classname).addClass("level-25");
        count--;
        return per += parseInt(val.per);
      });
      $('#percentage').val(0);
      $('#confirm').attr('data-count', count);
      return arr = [];
    },
    'click #confirm': function(e) {
      var count, meta_id, product, qty;
      e.preventDefault();
      console.log(count = $('#confirm').attr('data-count', count));
      if (parseInt(count) === 0) {
        this.ui.responseMessage.text("Consumption not updated!!!!");
        return false;
      }
      meta_id = $('#meta_id').val();
      qty = $('#percentage').val();
      product = this.model.get('id');
      return $.ajax({
        method: 'POST',
        data: 'meta_id=' + meta_id + '&qty=' + qty,
        url: "" + _SITEURL + "/wp-json/intakesbmi/" + (App.currentUser.get('ID')) + "/products/" + product,
        success: this.saveHandler,
        error: this.erroraHandler
      });
    }
  };

  AsperbmiView.prototype.saveHandler = function(response, status, xhr) {
    $('#percentage').val(0);
    console.log(response);
    this.model.set('occurrence', response);
    console.log($('#meta_id').val(response[0].meta_id));
    return this.generate(response);
  };

  AsperbmiView.prototype.serializeData = function() {
    var arr1, count, data;
    data = AsperbmiView.__super__.serializeData.call(this);
    arr1 = [];
    count = 0;
    data.day = moment().format("dddd");
    console.log(data.today = moment().format("MMMM Do YYYY"));
    $.each(this.model.get('occurrence'), function(ind, val) {
      var expected;
      expected = _.has(val, "expected");
      console.log(val.meta_value);
      if (!(_.isArray(val.meta_value))) {
        count += parseFloat(val.meta_value.qty);
      } else {
        $.each(val.meta_value, function(ind, val) {
          console.log(val);
          if (_.isArray(val)) {
            return $.each(val, function(item, value) {
              return count += parseFloat(value.qty);
            });
          } else {
            return count += parseFloat(val.qty);
          }
        });
      }
      console.log(count);
      if (expected === true) {
        return arr1.push(val.expected);
      }
    });
    data.org = arr1.length;
    data.confirm = parseInt(count);
    return data;
  };

  AsperbmiView.prototype.onShow = function() {
    return this.generate(this.model.get('occurrence'));
  };

  AsperbmiView.prototype.generate = function(data) {
    var bonus, count1, occur;
    console.log(occur = data);
    bonus = 0;
    count1 = 0;
    console.log(this.model.get('occurrence').length);
    console.log(this.model.get('servings'));
    bonus = parseInt(this.model.get('occurrence').length) - parseInt(this.model.get('servings'));
    $('.bonus').text(bonus);
    $.each(occur, function(ind, val) {
      var expected, occurrence;
      console.log(occurrence = _.has(val, "occurrence"));
      console.log(expected = _.has(val, "expected"));
      console.log(val.meta_value);
      if (!(_.isArray(val.meta_value))) {
        return count1 += parseFloat(val.meta_value.qty);
      } else {
        return $.each(val.meta_value, function(ind, val) {
          console.log(val);
          if (_.isArray(val)) {
            return $.each(val, function(item, value) {
              return count1 += parseFloat(value.qty);
            });
          } else {
            return count1 += parseFloat(val.qty);
          }
        });
      }
    });
    $('.bottlecnt').text(parseInt(count1));
    return $.each(occur, function(ind, val) {
      var count, expected, meta_id, occurrence;
      count = 0;
      console.log(occurrence = _.has(val, "occurrence"));
      console.log(expected = _.has(val, "expected"));
      meta_id = val.meta_id;
      console.log(val.meta_value);
      if (!(_.isArray(val.meta_value))) {
        count += parseFloat(val.meta_value.qty);
      } else {
        $.each(val.meta_value, function(ind, val) {
          console.log(val);
          if (_.isArray(val)) {
            return $.each(val, function(item, value) {
              return count += parseFloat(value.qty);
            });
          } else {
            return count += parseFloat(val.qty);
          }
        });
      }
      console.log(count);
      if (occurrence === true && expected === false && count !== 1) {
        AsperbmiView.prototype.update_occurrences(val);
      } else if (occurrence === true && expected === true && count !== 1) {
        AsperbmiView.prototype.update_occurrences(val);
      } else {
        AsperbmiView.prototype.create_occurrences(val);
      }
    });
  };

  AsperbmiView.prototype.create_occurrences = function(data) {
    $('#meta_id').val(0);
    $('#confirm').attr('data-count', 0);
    $('.high').addClass('level-25');
    $('.half').addClass('level-25');
    $('.medium').addClass('level-25');
    return $('.low').addClass('level-25');
  };

  AsperbmiView.prototype.update_occurrences = function(data) {
    var classArr, confirm, count, i, meta_value, _results;
    $('#add').hide();
    $('#meta_id').val(parseInt(data.meta_id));
    count = 0;
    meta_value = data.meta_value;
    if (!(_.isArray(data.meta_value))) {
      count += meta_value.qty;
    } else {
      $.each(meta_value, function(ind, val) {
        return count += parseFloat(val.qty);
      });
    }
    confirm = parseFloat(count) / 0.25;
    $('#confirm').attr('data-count', confirm);
    classArr = ['high', 'medium', 'half', 'low'];
    i = 0;
    arr = [];
    _results = [];
    while (i < confirm) {
      $('.' + classArr[i]).removeClass('level-25');
      arr.push({
        "class": $('.' + classArr[i]).attr('data-level'),
        qty: $('.' + classArr[i]).attr('data-qty'),
        per: 25
      });
      _results.push(i++);
    }
    return _results;
  };

  return AsperbmiView;

})(Marionette.ItemView);

App.AsperbmiCtrl = (function(_super) {
  __extends(AsperbmiCtrl, _super);

  function AsperbmiCtrl() {
    return AsperbmiCtrl.__super__.constructor.apply(this, arguments);
  }

  AsperbmiCtrl.prototype.initialize = function(options) {
    var product, productId, productModel, products, productsColl;
    if (options == null) {
      options = {};
    }
    productId = this.getParams();
    product = parseInt(productId[0]);
    products = [];
    App.useProductColl.each(function(val) {
      return products.push(val);
    });
    productsColl = new Backbone.Collection(products);
    productModel = productsColl.where({
      id: parseInt(productId[0])
    });
    return this._showView(productModel[0]);
  };

  AsperbmiCtrl.prototype._showView = function(productModel) {
    console.log(productModel);
    return this.show(new AsperbmiView({
      model: productModel
    }));
  };

  return AsperbmiCtrl;

})(Ajency.RegionController);
